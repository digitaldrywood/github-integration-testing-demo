name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: "1.21"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Install linters
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest
      
      - name: Run goimports
        run: goimports -local github.com/yourusername/yourrepo -d .
      
      - name: Run go vet
        run: go vet ./...
      
      - name: Run staticcheck
        run: staticcheck ./...

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Run unit tests
        run: go test -v -race -coverprofile=coverage.txt ./...
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Build binary
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} \
          go build -o dist/app-${{ matrix.os }}-${{ matrix.arch }} ./src
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: dist/

  # This job always runs but only does actual testing on main branch
  integration-test-mock:
    name: Integration Tests (Mock)
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Start mock S3 server
        run: |
          docker run -d \
            -p 9000:9000 \
            -e MINIO_ROOT_USER=minioadmin \
            -e MINIO_ROOT_PASSWORD=minioadmin \
            --name minio \
            minio/minio server /data
      
      - name: Wait for mock server
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:9000/minio/health/ready; then
              break
            fi
            sleep 1
          done
      
      - name: Run integration tests with mock
        run: |
          go test -v ./tests -tags=integration -s3 \
            -endpoint=http://localhost:9000 \
            -bucket=test-bucket
        env:
          AWS_ACCESS_KEY_ID: minioadmin
          AWS_SECRET_ACCESS_KEY: minioadmin
      
      - name: Cleanup
        if: always()
        run: docker stop minio && docker rm minio