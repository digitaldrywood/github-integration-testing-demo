name: Manual Integration Tests

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request number to test (optional)'
        required: false
        type: string
      test_storage:
        description: 'Run storage integration tests (simulated)'
        required: false
        default: true
        type: boolean
      test_database:
        description: 'Run database integration tests (simulated)'
        required: false
        default: false
        type: boolean
      test_api:
        description: 'Run external API integration tests (simulated)'
        required: false
        default: false
        type: boolean
      simulate_failures:
        description: 'Simulate random test failures'
        required: false
        default: false
        type: boolean
      use_production_creds:
        description: 'Use production credentials (requires additional approval)'
        required: false
        default: false
        type: boolean

env:
  GO_VERSION: "1.21"

jobs:
  setup:
    name: Setup and Validation
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ steps.get-ref.outputs.ref }}
      environment: ${{ steps.get-env.outputs.environment }}
    steps:
      - name: Determine checkout ref
        id: get-ref
        run: |
          if [ -n "${{ github.event.inputs.pr_number }}" ]; then
            echo "ref=refs/pull/${{ github.event.inputs.pr_number }}/head" >> $GITHUB_OUTPUT
            echo "::notice::Testing PR #${{ github.event.inputs.pr_number }}"
          else
            echo "ref=${{ github.ref }}" >> $GITHUB_OUTPUT
            echo "::notice::Testing branch ${{ github.ref_name }}"
          fi
      
      - name: Determine environment
        id: get-env
        run: |
          if [ "${{ github.event.inputs.use_production_creds }}" == "true" ]; then
            echo "environment=production-integration" >> $GITHUB_OUTPUT
            echo "::warning::Using production credentials - additional approval required"
          else
            echo "environment=integration-testing" >> $GITHUB_OUTPUT
            echo "::notice::Using staging credentials"
          fi
      
      - name: Validate inputs
        run: |
          if [ "${{ github.event.inputs.test_storage }}" != "true" ] && \
             [ "${{ github.event.inputs.test_database }}" != "true" ] && \
             [ "${{ github.event.inputs.test_api }}" != "true" ]; then
            echo "::error::At least one test type must be selected"
            exit 1
          fi

  storage-integration:
    name: Storage Integration Tests (Simulated)
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.test_storage == 'true'
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup.outputs.ref }}
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Run storage integration tests
        run: |
          FAIL_FLAG=""
          if [ "${{ github.event.inputs.simulate_failures }}" == "true" ]; then
            FAIL_FLAG="-fail"
          fi
          
          go test -v ./tests -tags=integration -storage $FAIL_FLAG \
            -timeout=10m
        env:
          STORAGE_TYPE: mock-s3
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: storage-test-results
          path: |
            test-results/
            *.log

  database-integration:
    name: Database Integration Tests (Simulated)
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.test_database == 'true'
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup.outputs.ref }}
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Run database integration tests
        run: |
          FAIL_FLAG=""
          if [ "${{ github.event.inputs.simulate_failures }}" == "true" ]; then
            FAIL_FLAG="-fail"
          fi
          
          go test -v ./tests -tags=integration -database $FAIL_FLAG \
            -timeout=10m
        env:
          DB_TYPE: mock-postgres
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: database-test-results
          path: |
            test-results/
            *.log

  api-integration:
    name: External API Integration Tests (Simulated)
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.test_api == 'true'
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup.outputs.ref }}
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Run API integration tests
        run: |
          FAIL_FLAG=""
          if [ "${{ github.event.inputs.simulate_failures }}" == "true" ]; then
            FAIL_FLAG="-fail"
          fi
          
          go test -v ./tests -tags=integration -api $FAIL_FLAG \
            -timeout=10m
        env:
          API_TYPE: mock-rest
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: api-test-results
          path: |
            test-results/
            *.log

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [storage-integration, database-integration, api-integration]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Generate summary
        run: |
          echo "## Integration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "storage-test-results" ]; then
            echo "### âœ… Storage Tests (Simulated)" >> $GITHUB_STEP_SUMMARY
            echo "Storage integration tests completed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -d "database-test-results" ]; then
            echo "### âœ… Database Tests" >> $GITHUB_STEP_SUMMARY
            echo "Database integration tests completed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -d "api-test-results" ]; then
            echo "### âœ… API Tests" >> $GITHUB_STEP_SUMMARY
            echo "API integration tests completed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
      
      - name: Comment on PR (if applicable)
        if: github.event.inputs.pr_number != ''
        uses: actions/github-script@v6
        with:
          script: |
            const pr_number = ${{ github.event.inputs.pr_number }};
            const run_url = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
              body: `ðŸ§ª Integration tests have been run manually by @${{ github.actor }}\n\n[View test results](${run_url})`
            });